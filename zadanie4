package academy.learnprogramming;

public class Main {

    public static void main(String[] args) {
        String aStr = "jeonynskotynSaeng";
        String bStr = "aAaAaAaaeSaenaekotysda";
        printLCSs(aStr , bStr);
    }
    // if function finds more than one equally long longest common substring
    // it prints the one that occurs first
    public static void printLCSs (String aStr , String bStr ) {
        int aLen = aStr.length();
        int bLen = bStr.length();
        String rStr = "";                   // result string
        int stringLength = 0;               // length of result string

            if (aLen == 0 || bLen == 0) {
                System.out.println("There aren't any common substrings");
            } else {
                int[][] array = new int[aLen+1][bLen+1];    // storing lengths of common parts from both strings
                                                            // +1 so as not to refer to non-alocated memory
                int iIndex = 0;                // i-index of longest common substring (row)
                int kIndex = 0;                // k-index of longest common substring (column)
                                            // counting how many same length lcs's are there

                for (int i = 0; i < aLen ; i++) {
                    for (int k = 0; k < bLen ; k++) {

                        if (i == 0 || k == 0) array[i][k] = 0;  // skipping 0 because otherwise .charAt(i-1) would
                                                                // try to operate on String[-1]
                        else if (aStr.charAt(i - 1) == bStr.charAt(k - 1)) {
                            array[i][k] = array[i - 1][k - 1] + 1;  // if characters are the same add one to "length"
                            if (stringLength < array[i][k]) {  // if loop finds bigger string
                                stringLength = array[i][k];    // it replaces current biggest
                                iIndex = i;                   // and saves its indexes
                                kIndex = k;
                        }
                        } else array[i][k] = 0;
                    }
                }
                    while (array[iIndex][kIndex] != 0) {  // displaying the result
                        rStr = aStr.charAt(iIndex - 1) + rStr;
                        iIndex--;   // moving to the previous
                        kIndex--;   // cell on 2-dimensional array
                        stringLength--;
                    }
                System.out.println(rStr);
            }
    }
}
